---
title: "week_2_lab"
author: "Bingqing Li"
execute: 
  warning: false
  message: false
format: pdf
editor: visual
---
```{r}
#| message: false
library(opendatatoronto)
library(tidyverse)
library(stringr)
library(skimr) # EDA
library(visdat) # EDA
library(janitor)
library(lubridate)
library(ggrepel)
```

```{r}
all_data <- list_packages(limit = 500)
head(all_data)

res <- list_package_resources("996cfe8d-fb35-40ce-b569-698d51fc683b") # obtained code from searching data frame above
res <- res |> mutate(year = str_extract(name, "202.?"))
delay_2022_ids <- res |> filter(year==2022) |> select(id) |> pull()

delay_2022 <- get_resource(delay_2022_ids)

# make the column names nicer to work with
delay_2022 <- clean_names(delay_2022)
# note: I obtained these codes from the 'id' column in the `res` object above
delay_codes <- get_resource("3900e649-f31e-4b79-9f20-4731bbfd94f7")
delay_data_codebook <- get_resource("ca43ac3d-3940-4315-889b-a9375e7b8aa4")

delay_2022 <- delay_2022 |> distinct()


## Removing the observations that have non-standardized lines
delay_2022 <- delay_2022 |> filter(line %in% c("BD", "YU", "SHP", "SRT"))

delay_2022 <- delay_2022 |> 
  left_join(delay_codes |> rename(code = `SUB RMENU CODE`, code_desc = `CODE DESCRIPTION...3`) |> select(code, code_desc)) 

delay_2022

delay_2022 <- delay_2022 |>
  mutate(code_srt = ifelse(line=="SRT", code, "NA")) |> 
  left_join(delay_codes |> rename(code_srt = `SRT RMENU CODE`, code_desc_srt = `CODE DESCRIPTION...7`) |> select(code_srt, code_desc_srt))  |> 
  mutate(code = ifelse(code_srt=="NA", code, code_srt),
         code_desc = ifelse(is.na(code_desc_srt), code_desc, code_desc_srt)) |> 
  select(-code_srt, -code_desc_srt)

delay_2022 <- delay_2022 |> 
  mutate(station_clean = ifelse(str_starts(station, "ST"), word(station, 1,2), word(station, 1)))

delay_2022 <- delay_2022 |> 
  mutate(code_red = case_when(
    str_starts(code_desc, "No") ~ word(code_desc, 1, 2),
    str_starts(code_desc, "Operator") ~ word(code_desc, 1,2),
    TRUE ~ word(code_desc,1))
         )

delay_2022
```

## Q1
1. Using the `delay_2022` data, plot the five stations with the highest mean delays. Facet the graph by `line`
```{r}
delay_2022 |>
  group_by(line, station) |>
  summarise(mean_delay = mean(min_delay)) |> 
  arrange(-mean_delay) |>
  slice(1:5) |>
  ggplot(aes(x = station, y = mean_delay)) + 
  geom_col() +
  facet_wrap(vars(line), 
           scales = "free_y",
             nrow = 4) +
  coord_flip()
```

## Q2
2. Restrict the `delay_2022` to delays that are greater than 0 and to only have delay reasons that appear in the top 50% of most frequent delay reasons. Perform a regression to study the association between delay minutes, and two covariates: line and delay reason. It's up to you how to specify the model, but make sure it's appropriate to the data types. Comment briefly on the results, including whether results generally agree with the exploratory data analysis above.

```{r}
delay_reasons <- delay_2022 |>
  filter(min_delay > 0) |>
  count(code) |>
  arrange(-n) |>
  mutate(cumulative_sum = cumsum(n)) |>
  filter(cumulative_sum <= sum(n)/2)|> 
  select(code)

delay_reasons

d2 <- delay_2022 |>
  filter(code %in% delay_reasons$code)

d2
```

```{r}
fig1 <- d2 |>
  group_by(code_red) |>
  summarise(mean_delay = mean(min_delay)) |>
  arrange(-mean_delay) |>
  ggplot(aes(x = code_red,
             y = mean_delay)) +
  geom_col() 



fig1

```
```{r}
ggplot(data = d2) + 
  geom_histogram(aes(x = min_delay, fill = line), position = 'dodge', bins = 10) + 
  scale_x_log10()
d2 |>
  group_by(line)|>
  summarise(mean_delay = mean(min_delay))
```

```{r}

model <- glm(min_delay ~ line +  code_red, data = d2, family = poisson)

summary(model)
```
The reference line is line BD with delay reason of ATC. The signs for lineSHP is positive and lineYU is negative, meaning that compared to the reference line, SHP has longer delay time and YU has shorter delay time. This results are same with mean delay time:  BD	3.848210,	SHP 4.925764,	YU 3.677986.	Beside, the signs of the coefficients for code_red of injured and Unauthorized are positive, meaning that these reasons for delays are associated with longer delays compared to the reference category. The exploratory data analysis in the provided image suggested that these reasons may cause longer . Thus, we still can conclude that regression results can generally agree with the exploratory data analysis above.



## Q3
3. Using the `opendatatoronto` package, download the data on mayoral campaign contributions for 2014 and clean it up. Hints:
    + find the ID code you need for the package you need by searching for 'campaign' in the `all_data` tibble above
    + you will then need to `list_package_resources` to get ID for the data file
    + note: the 2014 file you will get from `get_resource` has a bunch of different campaign contributions, so just keep the data that relates to the Mayor election
    + clean up the data format (fixing the parsing issue and standardizing the column names using `janitor`)
    
```{r}
id <- all_data[all_data$title =='Elections - Campaign Contributions',]$id
res <- list_package_resources(id) # obtained code from searching data frame above
res <- res |> mutate(year = str_extract(name, "201.?")) |> filter(str_like(name,'%Data'))
camp_2014_ids <- res |> filter(year==2014) |> select(id) |> pull()

camp_2014 <- get_resource(camp_2014_ids)

# make the column names nicer to work with
camp_2014 <- clean_names(camp_2014)
camp_2014 <- camp_2014$x2_mayor_contributions_2014_election_xls
colnames(camp_2014) <- camp_2014[1,]
camp_2014 <- camp_2014[-1,]
camp_2014 <- camp_2014 |> clean_names()
camp_2014

```
    
## Q4
4. Summarize the variables in the dataset. Are there missing values, and if so, should we be worried about them? Is every variable in the format it should be? If not, create new variable(s) that are in the right format.
```{r}
skim(camp_2014)
```

There are missing values in Contributor's Address, Goods or Service Desc, Relationship to Candidate, President/Business Manager, Authorized Representative and Ward. Given that our dataset contains 10,199 samples, and these columns have missing values for most or all rows, we should consider deleting these columns when analyzing the data. Therefore, we should not be concerned about these missing values.

For contribution_amount, it is character. The correct format is numeric number.
```{r}
camp_2014 <- camp_2014 |>
  mutate(Contribution_Amount = as.integer(contribution_amount))

camp_2014
```
## Q5
5. Visually explore the distribution of values of the contributions. What contributions are notable outliers? Do they share a similar characteristic(s)? It may be useful to plot the distribution of contributions without these outliers to get a better sense of the majority of the data.

```{r}
camp_2014 |>
  ggplot() +
  geom_histogram(aes(x = Contribution_Amount)) +
  scale_x_log10()
```
Our initial EDA hinted at some outlying contribution amounts.
```{r}
camp_2014 |>
  arrange(-Contribution_Amount) |>
  select(contributors_name, Contribution_Amount, relationship_to_candidate)
```

The persons who contributed a lot are candidate. Let's plot the distribution without candidates themselves contributions.
```{r}
camp_2014 |>
  filter(relationship_to_candidate != 'Candidate'
         | is.na(relationship_to_candidate) ) |>
  ggplot() + 
  geom_histogram(aes(Contribution_Amount))
```

## Q6
6. List the top five candidates in each of these categories:
    + total contributions
    + mean contribution
    + number of contributions

### total contributions
```{r}
camp_2014 |>
  group_by(candidate) |>
  summarise(tot_con = sum(Contribution_Amount, na.rm = T)) |>
  arrange(-tot_con)|>
  select(candidate, tot_con) |>
  head(5)
```

### mean contribution
```{r}
camp_2014 |>
  group_by(candidate) |>
  summarise(mean_con = mean(Contribution_Amount, na.rm = TRUE)) |>
  arrange(-mean_con)|>
  select(candidate, mean_con) |>
  head(5)
```
### number of contributions
```{r}
camp_2014 |>
  group_by(candidate) |>
  summarise(num_con = n()) |>
  arrange(-num_con)|>
  select(candidate, num_con) |>
  head(5)


```

## Q7
7. Repeat 6 but without contributions from the candidates themselves.
```{r}
d7 <- camp_2014 |>
  filter(relationship_to_candidate != 'Candidate' | is.na(relationship_to_candidate))
         
```

### total contributions
```{r}
d7 |>
  group_by(candidate) |>
  summarise(tot_con = sum(Contribution_Amount, na.rm = TRUE)) |>
  arrange(-tot_con)|>
  select(candidate, tot_con) |>
  head(5)
```

### mean contribution
```{r}
d7 |>
  group_by(candidate) |>
  summarise(mean_con = mean(Contribution_Amount)) |>
  arrange(-mean_con)|>
  select(candidate, mean_con) |>
  head(5)
```
### number of contributions
```{r}
d7 |>
  group_by(candidate) |>
  summarise(num_con = n()) |>
  arrange(-num_con)|>
  select(candidate, num_con) |>
  head(5)


```
## Q8
8. How many contributors gave money to more than one candidate? 

```{r}
camp_2014 |>
  select(contributors_name, candidate)|>
  distinct()|>
  group_by(contributors_name) |>
  summarise(num_con = n()) |>
  filter(num_con>1) |>
  dim()
```
184 contributors gave money to more than one candidate
